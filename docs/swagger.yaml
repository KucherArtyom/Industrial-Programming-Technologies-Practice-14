basePath: /
definitions:
  main.BasketItem:
    properties:
      productId:
        type: string
      quantity:
        type: integer
    type: object
  main.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  main.Product:
    properties:
      articleNumber:
        type: integer
      description:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      manufacturerId:
        type: integer
      name:
        type: string
      price:
        type: number
      productCategoryId:
        type: integer
      quantity:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: This is a sample API for an electronic store.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: My API
  version: "1.0"
paths:
  /basket:
    get:
      consumes:
      - application/json
      description: Get a list of products in the user's basket
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.BasketItem'
            type: array
      summary: Get Basket
      tags:
      - basket
    post:
      consumes:
      - application/json
      description: Add a new product to the user's basket
      parameters:
      - description: Basket item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/main.BasketItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.BasketItem'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add To Basket
      tags:
      - basket
  /basket/{productId}:
    delete:
      consumes:
      - application/json
      description: Remove a product from the user's basket
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete From Basket
      tags:
      - basket
  /login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of products with pagination, sorting, and filtering
        options
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Product name
        in: query
        name: name
        type: string
      - description: Product category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get Products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Add a new product
      parameters:
      - description: New product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/main.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a product from the catalog
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Product'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/main.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Product'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update Product
      tags:
      - products
  /productswithtimeout:
    get:
      consumes:
      - application/json
      description: Get a list of products with a request timeout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Product'
            type: array
      summary: Get Products With Timeout
      tags:
      - products
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Token
      tags:
      - auth
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new background task
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Task
      tags:
      - tasks
  /tasks/{id}:
    get:
      consumes:
      - application/json
      description: Get the status of a specific task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Task Status
      tags:
      - tasks
swagger: "2.0"
